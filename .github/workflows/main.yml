name: Build ARM64 Docker Image

on:
  workflow_dispatch:
    inputs:
      docker_image:
        description: 'Docker镜像名称，多个用英文逗号分开'
        required: true
        default: 'shellngn/pro:latest'
      tag:
        description: 'Tag for the built image'
        required: true
        default: 'latest'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Build Docker image using Dockerfile.alpine
      - name: Build Docker image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/arm64 -f Dockerfile.alpine -t my-arm64-image:${{ github.event.inputs.tag }} .

      # Step 4: Save Docker image to a tarball
      - name: Save Docker image to tarball
        run: |
          docker save my-arm64-image:${{ github.event.inputs.tag }} -o my-arm64-image-${{ github.event.inputs.tag }}.tar
          gzip -c my-arm64-image-${{ github.event.inputs.tag }}.tar > my-arm64-image-${{ github.event.inputs.tag }}.tar.gz
          rm my-arm64-image-${{ github.event.inputs.tag }}.tar

      # Step 5: List generated files for debugging (optional)
      - name: List generated files (debug)
        run: |
          echo "Generated tarballs:"
          find $GITHUB_WORKSPACE -name "*.tar.gz"

      # Step 6: Create a GitHub Release (optional)
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "Docker-ARM64-${{ github.event.inputs.tag }}"
          name: "ARM64 Docker Image Build"
          body: |
            [Download the ARM64 image](https://github.com/${{ github.repository }}/releases/tag/Docker-ARM64-${{ github.event.inputs.tag }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 7: Clean up (optional)
      - name: Clean up Docker images
        run: |
          docker system prune -af
